package com.udacity.pricing;

import com.udacity.pricing.domain.price.model.Price;

import static org.hamcrest.Matchers.hasEntry;
import static org.hamcrest.Matchers.hasItem;
import static org.hamcrest.Matchers.hasSize;
import static org.hamcrest.Matchers.is;
import static org.hamcrest.Matchers.not;
import static org.hamcrest.Matchers.notNullValue;
import static org.hamcrest.Matchers.comparesEqualTo;
import static org.hamcrest.Matchers.containsInAnyOrder;
import static org.hamcrest.Matchers.containsString;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.header;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.autoconfigure.json.AutoConfigureJsonTesters;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.json.JacksonTester;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.ResultActions;
import org.springframework.http.MediaType;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.beans.factory.annotation.Autowired;

import java.net.URI;
import java.util.*;
import java.time.LocalDateTime;

@Transactional
@SpringBootTest
@AutoConfigureMockMvc
@AutoConfigureJsonTesters
public class PricingServiceApplicationTests {

    @Autowired
    private MockMvc mvc;

    @Autowired
    private JacksonTester<Price> priceJson;

    @Autowired
    private JacksonTester<PriceDTO> priceDTOJson;

    private ResultActions findByVehicleId(long vehicleId) throws Exception {
        return findByVehicleId(vehicleId, Optional.empty());
    }

    private ResultActions findByVehicleId(long vehicleId, Optional<String> projection) throws Exception {
        return mvc.perform(
                get(new URI("/services/price/search/findByVehicleId?vehicleId=" + vehicleId + (projection.map(d -> ("&projection=" + d)).orElse(""))))
                        .accept(MediaType.APPLICATION_JSON_UTF8));
    }

    private PriceDTO getPrice(long vehicleId, Optional<String> projection) throws Exception {
        return priceDTOJson.parseObject(findByVehicleId(vehicleId, projection).andReturn().getResponse().getContentAsString());
    }

    private ResultActions existsByVehicleId(long vehicleId) throws Exception {
        return mvc.perform(
                get(new URI("/services/price/search/existsByVehicleId?vehicleId=" + vehicleId))
                        .accept(MediaType.APPLICATION_JSON_UTF8));
    }

    private ResultActions createPrice(Price price) throws Exception {
        return mvc.perform(
                post(new URI("/services/price"))
                        .content(priceJson.write(price).getJson())
                        .contentType(MediaType.APPLICATION_JSON_UTF8)
                        .accept(MediaType.APPLICATION_JSON_UTF8));
    }

    private ResultActions editPrice(long priceId, Price price) throws Exception {
        return mvc.perform(
                put(new URI("/services/price/" + priceId))
                        .content(priceJson.write(price).getJson())
                        .contentType(MediaType.APPLICATION_JSON_UTF8)
                        .accept(MediaType.APPLICATION_JSON_UTF8));
    }

	@Test
	public void contextLoads() {
	}

    /**
     * vehicleId is required, price is autogenerated, currency is set to USD by default.
     */
    @Test
    public void createPriceTest() throws Exception {
        Price price = new Price();
        price.setVehicleId(1L);
        createPrice(price)
                .andExpect(status().isCreated())
                .andExpect(jsonPath("vehicleId", is(price.getVehicleId().intValue())))
                .andExpect(jsonPath("currency", is(Price.Currency.USD.toString())))
                .andExpect(jsonPath("price", notNullValue()));

        price = new Price();
        createPrice(price)
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("errors", hasItem(hasEntry("message", "Vehicle Id is required."))));
    }

    /**
     * price is regenerated if vehicle id is updated and or updatePrice flag is passed enabled
     */
    @Test
    void updatePriceChangingVehicleIdTest() throws Exception {
        Price price = new Price();
        price.setVehicleId(1L);
        createPrice(price)
                .andExpect(status().isCreated())
                .andExpect(jsonPath("vehicleId", is(price.getVehicleId().intValue())))
                .andExpect(jsonPath("currency", is(Price.Currency.USD.toString())))
                .andExpect(jsonPath("price", notNullValue()));

        PriceDTO priceDTO = getPrice(price.getVehicleId(), Optional.of("priceFullResponse"));

        price = new Price();
        price.setVehicleId(2L);
        editPrice(priceDTO.getPriceId(), price)
                .andExpect(status().isOk())
                .andExpect(jsonPath("price", not(priceDTO.getPrice())));
    }

    /**
     * price is regenerated if vehicle id is updated and or updatePrice flag is passed enabled
     */
    @Test
    void updatePriceUpdatePriceFlagTest() throws Exception {
        Price price = new Price();
        price.setVehicleId(1L);
        createPrice(price)
                .andExpect(status().isCreated())
                .andExpect(jsonPath("vehicleId", is(price.getVehicleId().intValue())))
                .andExpect(jsonPath("currency", is(Price.Currency.USD.toString())))
                .andExpect(jsonPath("price", notNullValue()));

        PriceDTO priceDTO = getPrice(price.getVehicleId(), Optional.of("priceFullResponse"));

        price = new Price();
        price.setUpdatePrice(true);
        editPrice(priceDTO.getPriceId(), price)
                .andExpect(status().isOk())
                .andExpect(jsonPath("price", not(priceDTO.getPrice())));
    }

}
